n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the population
samp_mean[i] <- mean(samp)    # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp)        # save sample sd in ith element of samp_sd
}
lower <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower[1],upper[1])
plot_ci(lower, upper, mean(population))
lower <- samp_mean - 2.58 * samp_sd / sqrt(n)
upper <- samp_mean + 2.58 * samp_sd / sqrt(n)
plot_ci(lower, upper, mean(population))
pnorm(q, mean = 134, sd = 17, log.p = FALSE)
norm(100, mean=134, sd=17, lower.tail=FALSE)
pnorm(100, mean=134, sd=17, lower.tail=FALSE)
pnorm(100, mean=130, sd=17, lower.tail=FALSE)
dbinom(70:245, size = 245, p = 0.25)
sum(dbinom(70:245, size = 245, p = 0.25))
qnorm(0.95, u=0, sd=1)
qnorm(0.95, 0, s1)
qnorm(0.95, 0, 1)
qnorm(0.975, 0, 1)
qnorm(0.95, u=0, sd=1)
qnorm(0.95, 0, sd=1)
qnorm(0.95, mean=0, sd=1)
qnorm(0.95, mean=0, sd=1)
qnorm(90, 0, 1)
qnorm(90, mean=0, sd=1)
qnorm(0.90, mean=0, sd=1)
qnorm(0.80, mean=0, sd=1)
dbinom(40, size=50, prob=0.5)
dbinom(8, size=10, prob=0.5)
sum(dbinom(1:40, size=50, prob=0.5))
sum(dbinom(1:8, size=10, prob=0.5))
sum(dbinom(8:10, size=10, prob=0.5))
sum(dbinom(40:50, size=50, prob=0.5))
?pt
pt(0.05, 24)
qt(0.05, 24)
?sqrt
2^2
sqrt((3.4)^2/18 + (2.7)^2/18)
download.file(url = "http://bit.ly/dasi_project_template", destfile = "dasi_project_template.Rmd")
install.packages("rmarkdown")
download.file(url = "http://bit.ly/dasi_project_template", destfile = "dasi_project_template.Rmd")
load(url("http://bit.ly/dasi_gss_data"))
head(gss)
gss[1]
dim(gss)
names(gss)
gss$year
gss[1,]
load(url("http://bit.ly/dasi_gss_data"))
head(gss[,])
income_religion_subset =c("income06", "conclerg")
subset = gss[income_religion_subset]
subset = gss[income_religion_subset, which(gss$year == 2012)]
subset = gss[income_religion_subset]
head(subset)
subset = gss[income_religion_subset]
subset_2012 = subset[which(subset$year = 2012)]
subset_2012 = subset[which(subset$year == 2012)]
View(subset_2012)
subset
income_religion_subset =c("income06", "conclerg", "year")
subset = gss[income_religion_subset]
subset
subset_2012 = subset[which(subset$year == 2012)]
subset_2012 = subset[which(subset$year == '2012')]
subset_2012 = subset[which(year == '2012')]
head(subset)
subset$year
subset$year == 2012
subset_2012 = subset[which(subset$year == 2012)]
subset_2012 = subset[which(subset$year == 2012),]
View(subset_2012)
subset_2012 = subset[which(subset$year == 2012),]
table(subset_2012)
remaining_variables =c("conclerg", "income06", "year")
subset = gss[remaining_variables]
subset_2012 = subset[which(subset$year == 2012),]
table(subset_2012)
table(subset_2012)
remaining_variables =c("income06", "conclerg", "year")
subset = gss[remaining_variables]
subset_2012 = subset[which(subset$year == 2012),]
table(subset_2012)
plot(subset_2012$income06, subset_2012$conclerg, xlab="income" , ylab="religion belief" )
library(vcd)
install.packages(vcd)
install.packages(vcd)
install.packages("vcd")
library(vcd)
library("vcd")
install.packages("vcd")
library("vcd")
install.packages("grid")
install.packages("grid")
library("vcd")
mosaic(subset_2012, shade=TRUE, legend=TRUE)
assoc(subset_2012, shade=TRUE, legend=TRUE)
assoc(subset_2012["income06", "conclerg"], shade=TRUE, legend=TRUE)
subset_2012 = gss[which(subset$year == 2012),]
remaining_variables = c("income06", "conclerg")
subset = subset_2012[remaining_variables]
table(subset_2012)
table(subset)
assoc(subset, shade=TRUE, legend=TRUE)
assoc(subset, shade=TRUE, legend=TRUE)
mosaic(subset, shade=TRUE, legend=TRUE)
mosaic(subset, legend=TRUE)
mosaic(subset)
mosaicplot(table(subset))
hist(subset$income06)
barplot(subset$income06)
subset$income06
subset$conclerg
barplot(subset$income06, na.rm=TRUE)
barplot(subset$conclerg, na.rm=TRUE)
barplot(as.matrix(subset$conclerg), na.rm=TRUE)
barplot(as.matrix(subset$conclerg))
barplot(table(subset$conclerg), na.rm=TRUE)
barplot(table(subset$conclerg))
barplot(table(subset$conclerg, na.rm=TRUE))
counts = table(subset$conclerg)
barplot(counts)
counts = table(subset$income06)
barplot(counts)
boxplot(counts)
dim(subset_2012)[1]
source("http://bit.ly/dasi_inference")
inference(y = subset$conclerg, x = gss$income06, est = "proportion", type = "ht", alternative = "different", method = "theoretical")
inference(y = subset$conclerg, x = gss$income06, est = "proportion", type = "ht", alternative = "twosided", method = "theoretical")
inference(y = subset$conclerg, x = gss$income06, est = "proportion", type = "ht", alternative = "chi-square", method = "theoretical")
inference(y = subset$conclerg, x = subset$income06, est = "proportion", type = "ht", alternative = "chi-square", method = "theoretical")
inference(y = subset$conclerg, x = subset$income06, est = "proportion", type = "ht", alternative = "twosided", method = "theoretical")
subset_clean = droplevels(subset)
inference(y = subset_clean$conclerg, x = subset_clean$income06, est = "proportion", type = "ht", alternative = "twosided", method = "theoretical")
subset_clean
inference(y = subset_clean$conclerg, x = subset_clean$income06, est = "proportion", type = "ht", alternative = "twosided", method = "theoretical")
inference(y = subset_clean$conclerg, x = subset_clean$income06, est = "proportion", type = "ht", alternative = "chi-square", method = "theoretical")
inference(y = subset_clean$conclerg, x = subset_clean$income06, est = "proportion", type = "ht", alternative = "greater", method = "theoretical")
subset_2012 = gss[which(gss$year == 2012 & gss$income06 != "Refused"),]
warnings()
remaining_variables = c("income06", "conclerg")
subset = subset_2012[remaining_variables]
inference(y = subset_clean$conclerg, x = subset_clean$income06, est = "proportion", type = "ht", alternative = "greater", method = "theoretical")
subset_clean = droplevels(subset)
inference(y = subset_clean$conclerg, x = subset_clean$income06, est = "proportion", type = "ht", alternative = "greater", method = "theoretical")
inference(y = subset_clean$conclerg, x = subset_clean$income06, est = "proportion", type = "ht", alternative = "greater", method = "simulation")
inference(y = subset_clean$conclerg, x = subset_clean$income06, est = "proportion", type = "ht", alternative = "twosided", method = "simulation")
inference(y = subset_clean$conclerg, x = subset_clean$income06, est = "proportion", type = "ht", alternative = "chi-square", method = "simulation")
inference(y = subset_clean$conclerg, x = subset_clean$income06, est = "proportion", type = "ht", alternative = "chi-square test", method = "simulation")
inference(y = subset_clean$conclerg, x = subset_clean$income06, est = "proportion", type = "ht", alternative = "greater", method = "simulation")
inference(y = subset_clean$income06, x = subset_clean$conclerg, est = "proportion", type = "ht", alternative = "greater", method = "simulation")
sample_2012
View(subset_2012)
View(subset)
subset
load(url("http://www.openintro.org/stat/data/evals.RData"))
summary(evals$score)
barplot(evals$score)
hist(evals$score)
hist(evals$score, breaks=5)
hist(evals$score)
subset(evals, evals$score < 3)
dim(subset(evals, evals$score < 3))[1]
dim(subset(evals, evals$score > 4.6))[1]
dim(subset(evals, evals$score > 4.6))[1]/463
summary(evals$score)
plot(evals$cls_perc_eval, evals$pic_outfit)
barplot(evals$cls_perc_eval, evals$pic_outfit)
mosaicplot(evals$cls_perc_eval, evals$pic_outfit)
plot(evals$cls_perc_eval, evals$pic_outfit)
tbl = table(evals$cls_perc_eval, evals$pic_outfit)
plot(tbl)
hist(tbl)
barplot(tbl)
plot(tbl)
barplot(tbl)
hist(tbl)
plot(evals$cls_perc_eval, evals$pic_outfit)
plot(evals$score ~ evals$bty_avg)
?jitter
plot(jitter(evals$score) ~ evals$bty_avg)
m_bty = lm(score ~ bty_avg, dataset=evals)
m_bty = lm(score ~ bty_avg, data=evals)
abline(m_bty)
summary(m_bty)
m_bty
m_bty$residuals
plot(m_bty$residuals)
plot(evals$bty_avg ~ evals$bty_f1lower)
cor(evals$bty_avg, evals$bty_f1lower)
plot(evals[,13:19])
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
plot(m_bty_gen)
lm(score ~ bty_avg, data = evals)
plot(lm(score ~ bty_avg, data = evals))
summmultilines(m_bty_gen
multilines(m_bty_gen
multilines(m_bty_gen)
multiLines(m_bty_gen)
m_bty_rank <- lm(score ~ bty_avg + rank, data = evals)
summary(m_bty_rank)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m_full)
m_full <- lm(score ~ ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
m1 <- lm(score ~ ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
m2 <- lm(score ~ rank + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m1)$adj.r.squared
summary(m2)$adj.r.squared
m3 <- lm(score ~ rank + ethnicity + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
m4 <- lm(score ~ rank + ethnicity + gender + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
m5 <- lm(score ~ rank + ethnicity + gender + language + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
m6 <- lm(score ~ rank + ethnicity + gender + language + age
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
m7 <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_level + cls_profs + cls_credits + bty_avg, data = evals)
m8 <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_profs + cls_credits + bty_avg, data = evals)
m9 <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg, data = evals)
m10 <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + bty_avg, data = evals)
m11 <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits, data = evals)
summary(m1)$adj.r.squared
summary(m2)$adj.r.squared
summary(m3)$adj.r.squared
summary(m4)$adj.r.squared
summary(m5)$adj.r.squared
summary(m6)$adj.r.squared
summary(m7)$adj.r.squared
summary(m8)$adj.r.squared
summary(m9)$adj.r.squared
summary(m10)$adj.r.squared
summary(m11)$adj.r.squared
summary(m9)
summary(evals$score)
1 - ((57737/22790) * (50/48))
1 - (((57737+7003)/(22790+57737+7003)) * (50/48))
((57737+7003)/(22790+57737+7003))
sepal_length = [6.9,6.7,6.9,5.8,6.8]
sepal_length = c(6.9,6.7,6.9,5.8,6.8)
sepal_length = c(3.1,3.1,3.1,2.7,3.2)
sepal_length = c(6.9,6.7,6.9,5.8,6.8)
sepal_width = c(3.1,3.1,3.1,2.7,3.2)
cor(sepal_length, sepal_width)
getwd()
load("/home/jackson/Documents/documentos-particulares/programacao/r_projects_files/.RData")
cube <- function(x, n) {
x^3
}
cube(3)
x <- 0
x <- 1:10
if (x > 5)
0
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
?cbind
for (i in 1:10) {}
print(i)
for (i in 1:10) {
print(i)
}
x <- "blalala"
for(letter in x) print(letter)
x <- c("a", "b", "c", "d")
for(i in seq_along(x)) print (x[i])
count <- 0
while(count < 10) {}
while(count < 10) { print(count) count <- count + 1 }
while(count < 10) {
print(count)
count = count + 1
]
while(count < 10) {
print(count)
count = count + 1
}
?rbinom
computeEstimate()
computeEstimate()
5
32
6 6
6 : 6
6 , 6
add2 <- function(x, y) {
x + y
}
add2(3,5)
above10 <- function(x) {
use <- x > 10
x[use]
}
y <- 5:15
above(y)
above10(y)
above <-function(x,n) {
use <- x > n
x[use]
}
above(y,7)
above <-function(x,n=10) {
use <- x > n
x[use]
}
above(y)
above(y, 8)
above <-function(x,n) {
use <- x > n
x[use]
}
formals(above)
above <-function(x,n=10) {
use <- x > n
x[use]
}
formals(above)
?sd
mean
args(paste)
args(cat)
lm
search()
fs
c
c = 3
c
c()
c
testinho < - function(x) {
x+z
}
testinho <- function(x) {
x+z
}
testinho(2)
z = 10
testinho(2)
ls(testinho)
ls(environment(testinho))
get("c", environment(testinho))
c
get("above", environment(testinho))
sys.parents
sys.parents()
parent.frame()
?parent.frame
sys.frame()
sys.parents()
emptyenv()
search()
parent.frame(5)
sys.parent(4)
sys.frame()
sys.frame(1)
b = 1:10
attributes(b)
b
attributes(b[0])
?attributes
paste(2,3)
?paste
paste(2,3, sep = "")
if (is.na(c(1,2,3, "NA")) == TRUE) {
print("nothing")
}
?read.csv()
apply(c(1,2,3, "NA"), 0, is.na)
apply(c(1,2,3, "NA"), 1, is.na)
x <- c(1,2,3, "NA")
attributes(x)
dim(x)
length(x)
x <- vector("numeric", length = 10)
length(x)
attributes(x)
dim(x)
getwd()
source("cachematrix.R")
A <- makeCacheMatrix(matrix(1:4, 2,2))
A
cacheSolve(A)
cacheSolve(A)
cacheSolve(A)
source("cachematrix.R")
A <- makeCacheMatrix(matrix(1:4, 2,2))
A
source("cachematrix.R")
A <- makeCacheMatrix(matrix(1:4, 2,2))
cacheSolve(A)
cacheSolve(A)
cacheSolve(A)
source("cachematrix.R")
A <- makeCacheMatrix(matrix(1:4, 2,2))
A
cacheSolve(A)
cacheSolve(A)
cacheSolve(A)
source("cachematrix.R")
A <- makeCacheMatrix(matrix(1:4, 2,2))
A
cacheSolve(A)
cacheSolve(A)
A
source("cachematrix.R")
A <- makeCacheMatrix(matrix(1:4, 2,2))
cacheSolve(A)
cacheSolve(A)
cacheSolve(A)
cacheSolve(A)
source("cachematrix.R")
A <- makeCacheMatrix(matrix(1:4, 2,2))
A
cacheSolve(A)
cacheSolve(A)
cacheSolve(A)
cacheSolve(A)
df <- data.frame(hospital=character(), character(), stringsAsFactors=FALSE)
df
df[-1]
df[0]
df[1]
df[1,] <- c("testew", "SP")
df
df <- data.frame(hospital=character(), state=character(), stringsAsFactors=FALSE)
df[1,] <- c("testew", "SP")
df
df[2,] <- c("t", "RJ")
df
df[nrow(df),] <- c("t", "RJ")
df
df[nrow(df)+1,] <- c("t", "RJ")
df
df[nrow(df)+1,] <- NA
df
unique(df[,1])
unique(df[,1], na.rm=TRUE)
unique(df[,1], na.rm=TRUE)[!is.na(df[,1])]
unique(df[,1], na.rm=TRUE)[is.na(df[,1])]
class(unique(df[,1], na.rm=TRUE))
unique(df[,1], na.rm=TRUE)[is.na(df[,1])]
unique(df[,1], na.rm=TRUE)[!is.na(df[,1])]
unique(df[,1])[!is.na(df[,1])]
s <- unique(df[,1])[!is.na(df[,1])]
class(s)
s
str(s)
class(s[3])
for (i in unique(df[,1])) {
print(i)
}
for (i in unique(df[,1])) {
if (!is.na(i)) {
print(i)
}
}
s <- unique(df[,1], na.rm=TRUE)
s
s[!is.na(s)]
getwd("/home/jackson/Documents/documentos-particulares/programacao/r_projects_files/ProgrammingAssignment3")
setwd("/home/jackson/Documents/documentos-particulares/programacao/r_projects_files/ProgrammingAssignment3")
source("rankall.R")
tail(rankall("pneumonia", "worst"), 3)
source("rankall.R")
tail(rankall("pneumonia", "worst"), 3)
source("rankall.R")
tail(rankall("pneumonia", "worst"), 3)
source("rankall.R")
tail(rankall("pneumonia", "worst"), 3)
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
